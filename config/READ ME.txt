What is this stuff?

Do these steps in order:

1. make_db.sql is the script that creates the postgres DB & user. 

To run it in iTerm:

> psql  ->  postgres command line
> \i [path to script directory]/make_db.sql;  -> runs script

If it runs correctly, you should see something like this:

DROP ROLE
CREATE ROLE
ALTER DATABASE
You are now connected to database "programmerdata" as user “andrew”.

This script starts by deleting old tables/roles/DBs with these names, so you can use it to recreate the database if necessary.



2. Make sure you have the current files/data from github

The sequelize command that makes the DB depends on configuration info in those files.


2a. If you haven’t already, while in your project directory NPM INSTALL


3. config.json goes in /config in your project root directory now. This has the DB connection info.

4. Run migration.

Reminder: to run sequelize migration, command is:

> sequelize db:migrate

It should take several seconds. If it runs correctly, you should see something like this in your terminal:

  Using environment "development".
  == 20160810014610-surveydata_table: migrating =======


5. Load the data. In the terminal, type

> psql

for the postgres CLI, then 

> \c programmerdata;

to connect to the database. To load the CSV file, type the command below, replacing the dummy path with the path to your CSV file:

COPY surveydata("Age", "AttendedBootcamp", "BootcampFinish", "BootcampFullJobAfter", "BootcampLoanYesNo", "BootcampMonthsAgo", "BootcampName", "BootcampPostSalary", "BootcampRecommend", "ChildrenNumber", "CityPopulation", "CodeEventBootcamp", "CodeEventCoffee", "CodeEventConferences", "CodeEventDjangoGirls", "CodeEventGameJam", "CodeEventGirlDev", "CodeEventHackathons", "CodeEventMeetup", "CodeEventNodeSchool", "CodeEventNone", "CodeEventOther", "CodeEventRailsBridge", "CodeEventRailsGirls", "CodeEventStartUpWknd", "CodeEventWomenCode", "CodeEventWorkshop", "CommuteTime", "CountryCitizen", "CountryLive", "EmploymentField", "EmploymentFieldOther", "EmploymentStatus", "EmploymentStatusOther", "ExpectedEarning", "FinanciallySupporting", "Gender", "HasChildren", "HasDebt", "HasFinancialDependents", "HasHighSpdInternet", "HasHomeMortgage", "HasServedInMilitary", "HasStudentDebt", "HomeMortgageOwe", "HoursLearning", "IDx", "IDy", "Income", "IsEthnicMinority", "IsReceiveDiabilitiesBenefits", "IsSoftwareDev", "IsUnderEmployed", "JobApplyWhen", "JobPref", "JobRelocateYesNo", "JobRoleInterest", "JobRoleInterestOther", "JobWherePref", "LanguageAtHome", "MaritalStatus", "MoneyForLearning", "MonthsProgramming", "NetworkID", "Part1EndTime", "Part1StartTime", "Part2EndTime", "Part2StartTime", "PodcastChangeLog", "PodcastCodeNewbie", "PodcastCodingBlocks", "PodcastDeveloperTea", "PodcastDotNetRocks", "PodcastHanselminutes", "PodcastJSJabber", "PodcastJsAir", "PodcastNone", "PodcastOther", "PodcastProgrammingThrowDown", "PodcastRubyRogues", "PodcastSEDaily", "PodcastShopTalk", "PodcastTalkPython", "PodcastWebAhead", "ResourceBlogs", "ResourceBooks", "ResourceCodeWars", "ResourceCodecademy", "ResourceCoursera", "ResourceDevTips", "ResourceEdX", "ResourceEggHead", "ResourceFCC", "ResourceGoogle", "ResourceHackerRank", "ResourceKhanAcademy", "ResourceLynda", "ResourceMDN", "ResourceOdinProj", "ResourceOther", "ResourcePluralSight", "ResourceReddit", "ResourceSkillCrush", "ResourceSoloLearn", "ResourceStackOverflow", "ResourceTreehouse", "ResourceUdacity", "ResourceUdemy", "ResourceW3Schools", "ResourceYouTube", "SchoolDegree", "SchoolMajor", "StudentDebtOwe") FROM '[filepath]/filename.csv' DELIMITER ',' CSV;

If it runs correctly, you should see the number “15620” - the number of new records added.

You can test this through a quick SELECT statement:

> SELECT COUNT(*) FROM surveydata;

you should see:

 count
-------
 15620
(1 row)